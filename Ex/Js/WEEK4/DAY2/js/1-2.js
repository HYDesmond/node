/*
 * JS中的同步编程和异步编程
 *   JS是单线程的（一次只能执行一个任务，当前任务没有完成，下面的任务是不进行处理的）
 *
 *   同步编程(sync:synchronize)：任务是按照顺序一件件的完成的,当前任务没有完成,下面的任务不进行处理
 *
 *   异步编程(async):当前任务在等待执行的时候,我们不去执行,继续完成下面的任务,当下面的任务完成后,而是也到达等待的时间了,才去完成当前的任务
 *   ->定时器都是异步编程的
 *   ->所有的事件绑定也是异步编程的
 *   ->AJAX中有异步编程
 *   ->有些人把回调函数当做异步编程(理解起来比较牵强)
 *
 *   其余的都是同步编程
 */

//=>同步编程以及如何验证当前任务消耗的时间或者性能
// var startTime = new Date();
// for (var i = 0; i < 100000000; i++) {
//     if (i === 999999) {
//         console.log('no');//=>1 'no'
//     }
// }
// console.log(new Date() - startTime);
// console.log('ok');//=>2 'ok'

//=>在真实项目中我们要避免出现死循环：因为循环是同步编程,当前循环无法结束证明任务没完成,后续的任务操作都执行不了了
// while (1 === 1) {
//
// }
// console.log('ok');

// //=>第一件任务：创建一个变量
// var n = 0;
// //=>第二件任务：创建一个定时器 （等待任务：1000MS执行方法是一个等待执行的任务）
// setTimeout(function () {
//     n++;
//     console.log(n);//=>2) 1
// }, 1000);
// //=>第三个任务：输出0
// console.log(n);//=>1) 0

/*
 * 同步异步编程的核心原理
 *   JS中有两个任务队列(存放任务列表的空间就是任务队列)
 *
 *   1、主任务队列：同步执行任务(从上到下依次执行)
 *   2、等待任务队列：异步执行任务
 */
// 王洋饭店
//   高梅(单线程理解为只能招聘一个服务员)
//
// 10:00:00 徐锐：拍黄瓜 (5MIN)
// 10:00:01 赵淼：水煮鱼 (30MIN)
// 10:00:02 金广：醋溜白菜 (10MIN)
// 10:00:03 元帅：白开水 (1MIN)
// ...
// 11:00:00 高梅忙完了，开始端菜，谁的先到时间先给谁端

setTimeout(function () {
    console.log(1);
}, 50);

setTimeout(function () {
    console.log(2);
}, 10);

setTimeout(function () {
    console.log(3);
}, 30);

for (var i = 0; i < 100000000; i++) {
    //=>需要600MS~700MS
}
console.log(4);